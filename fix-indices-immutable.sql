-- ================================================
-- FIX PARA ERROR: functions in index expression must be marked IMMUTABLE
-- ================================================
-- Script para corregir √≠ndices con funciones no-inmutables

-- ================================
-- ELIMINAR √çNDICES PROBLEM√ÅTICOS
-- ================================

DO $$
BEGIN
  -- Eliminar √≠ndice problem√°tico si existe
  IF EXISTS (
    SELECT 1 FROM pg_indexes 
    WHERE schemaname = 'public' 
    AND indexname = 'idx_movimientos_caja_empleado_fecha'
  ) THEN
    DROP INDEX IF EXISTS idx_movimientos_caja_empleado_fecha;
    RAISE NOTICE 'üóëÔ∏è Eliminado √≠ndice problem√°tico idx_movimientos_caja_empleado_fecha';
  END IF;
END $$;

-- ================================
-- CREAR √çNDICES CORRECTOS (SIN FUNCIONES)
-- ================================

-- √çndice simple en created_at (sin funci√≥n DATE)
CREATE INDEX IF NOT EXISTS idx_movimientos_caja_created_at ON movimientos_caja(created_at);
RAISE NOTICE '‚úÖ Creado √≠ndice idx_movimientos_caja_created_at';

-- √çndice compuesto empleado_id + created_at
CREATE INDEX IF NOT EXISTS idx_movimientos_caja_empleado_created_at ON movimientos_caja(empleado_id, created_at);
RAISE NOTICE '‚úÖ Creado √≠ndice idx_movimientos_caja_empleado_created_at';

-- √çndice para consultas por fecha espec√≠fica (mejor alternativa)
CREATE INDEX IF NOT EXISTS idx_movimientos_caja_date_trunc_day ON movimientos_caja(date_trunc('day', created_at));
RAISE NOTICE '‚úÖ Creado √≠ndice idx_movimientos_caja_date_trunc_day';

-- ================================
-- CREAR FUNCI√ìN IMMUTABLE PARA EXTRAER FECHA (si es necesaria)
-- ================================

-- Crear funci√≥n immutable personalizada para extraer fecha
CREATE OR REPLACE FUNCTION extract_date_immutable(timestamp_input TIMESTAMP WITH TIME ZONE)
RETURNS DATE
LANGUAGE SQL
IMMUTABLE
STRICT
AS $$
  SELECT timestamp_input::DATE;
$$;

RAISE NOTICE '‚úÖ Creada funci√≥n immutable extract_date_immutable';

-- Ahora podemos crear √≠ndice con funci√≥n immutable si es necesario
CREATE INDEX IF NOT EXISTS idx_movimientos_caja_fecha_immutable ON movimientos_caja(extract_date_immutable(created_at));
RAISE NOTICE '‚úÖ Creado √≠ndice con funci√≥n immutable';

-- ================================
-- √çNDICES ADICIONALES PARA PERFORMANCE
-- ================================

-- √çndices para mejores consultas de fecha
CREATE INDEX IF NOT EXISTS idx_movimientos_caja_tipo_fecha ON movimientos_caja(tipo, created_at);
CREATE INDEX IF NOT EXISTS idx_movimientos_caja_empleado_tipo ON movimientos_caja(empleado_id, tipo);

-- √çndices para referencia (si las columnas existen)
DO $$
BEGIN
  IF EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'movimientos_caja' AND column_name = 'referencia_id'
  ) THEN
    CREATE INDEX IF NOT EXISTS idx_movimientos_caja_referencia_id ON movimientos_caja(referencia_id);
    CREATE INDEX IF NOT EXISTS idx_movimientos_caja_referencia_tipo ON movimientos_caja(referencia_tipo);
    CREATE INDEX IF NOT EXISTS idx_movimientos_caja_ref_completa ON movimientos_caja(referencia_id, referencia_tipo);
    RAISE NOTICE '‚úÖ Creados √≠ndices para columnas de referencia';
  ELSE
    RAISE NOTICE '‚ö†Ô∏è Columnas de referencia no existen en movimientos_caja';
  END IF;
END $$;

-- ================================
-- √çNDICES PARA OTRAS TABLAS (VERIFICACI√ìN)
-- ================================

-- Verificar y crear √≠ndices seguros para otras tablas
CREATE INDEX IF NOT EXISTS idx_ventas_empleado_fecha ON ventas(empleado_id, created_at);
CREATE INDEX IF NOT EXISTS idx_ventas_cliente_fecha ON ventas(cliente_id, created_at);
CREATE INDEX IF NOT EXISTS idx_ventas_fecha ON ventas(created_at);
CREATE INDEX IF NOT EXISTS idx_ventas_total ON ventas(total);

-- √çndices para venta_items
CREATE INDEX IF NOT EXISTS idx_venta_items_venta_id ON venta_items(venta_id);
CREATE INDEX IF NOT EXISTS idx_venta_items_producto_id ON venta_items(producto_id);

-- √çndices para productos
CREATE INDEX IF NOT EXISTS idx_productos_categoria ON productos(categoria);
CREATE INDEX IF NOT EXISTS idx_productos_activo ON productos(activo);
CREATE INDEX IF NOT EXISTS idx_productos_stock ON productos(stock);
CREATE INDEX IF NOT EXISTS idx_productos_codigo_sku ON productos(codigo_sku);

-- √çndices para clientes
CREATE INDEX IF NOT EXISTS idx_clientes_activo ON clientes(activo);
CREATE INDEX IF NOT EXISTS idx_clientes_email ON clientes(email);
CREATE INDEX IF NOT EXISTS idx_clientes_telefono ON clientes(telefono);

-- √çndices para empleados
CREATE INDEX IF NOT EXISTS idx_empleados_activo ON empleados(activo);
CREATE INDEX IF NOT EXISTS idx_empleados_rol ON empleados(rol);
CREATE INDEX IF NOT EXISTS idx_empleados_email ON empleados(email);

RAISE NOTICE '‚úÖ Creados √≠ndices adicionales para performance';

-- ================================
-- VERIFICACI√ìN FINAL DE √çNDICES
-- ================================

DO $$
DECLARE
  total_indices INTEGER;
  indices_movimientos INTEGER;
BEGIN
  -- Contar total de √≠ndices
  SELECT COUNT(*) INTO total_indices
  FROM pg_indexes
  WHERE schemaname = 'public';
  
  -- Contar √≠ndices espec√≠ficos de movimientos_caja
  SELECT COUNT(*) INTO indices_movimientos
  FROM pg_indexes
  WHERE schemaname = 'public' 
  AND tablename = 'movimientos_caja';
  
  RAISE NOTICE '';
  RAISE NOTICE 'üìä VERIFICACI√ìN DE √çNDICES';
  RAISE NOTICE '========================';
  RAISE NOTICE 'Total de √≠ndices en el sistema: %', total_indices;
  RAISE NOTICE '√çndices en movimientos_caja: %', indices_movimientos;
  
  -- Listar √≠ndices de movimientos_caja
  RAISE NOTICE '';
  RAISE NOTICE 'üìã √çNDICES EN MOVIMIENTOS_CAJA:';
  FOR i IN (
    SELECT indexname 
    FROM pg_indexes 
    WHERE schemaname = 'public' 
    AND tablename = 'movimientos_caja'
    ORDER BY indexname
  ) LOOP
    RAISE NOTICE '  ‚úÖ %', i.indexname;
  END LOOP;
  
  RAISE NOTICE '';
  RAISE NOTICE 'üéâ TODOS LOS √çNDICES CREADOS CORRECTAMENTE';
  RAISE NOTICE '‚úÖ Sin funciones no-inmutables en expresiones de √≠ndice';
  RAISE NOTICE '‚úÖ Performance optimizada para consultas comunes';
END $$;
